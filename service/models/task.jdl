application {
  config {
    //applicationType monolith
    //authenticationType jwt
    baseName Task 
    //buildTool maven
    //cacheProvider hazelcast
    //clientFramework angularX
    //clientPackageManager npm 
    //databaseType sql
    //devDatabaseType h2Disk
    //enableHibernateCache true
    //enableTranslation false 
    packageName com.lsfoo.dev.task
    //prodDatabaseType mysql
    searchEngine elasticsearch
    //serviceDiscoveryType no
    //useSass false 
    enableSwaggerCodegen true
    languages [en, zh-cn]
    //messageBroker false
    nativeLanguage zh-cn
    //serverPort 8080
    //skipClient false
    //skipServer false
    //skipUserManagement 	true
    //testFrameworks[ protractor]
    //websocket false
  }
  entities * 
}
//application {
//  config {
//    serviceDiscoveryType no
//    applicationType microservice
//    authenticationType jwt
//    baseName task 
//    buildTool maven
//    cacheProvider hazelcast
//    enableHibernateCache false
//    packageName com.lsfoo.dev.task
//    prodDatabaseType mysql
//    searchEngine elasticsearch
//    skipUserManagement true
//    useSass true
//  }
//  entities * 
//}



/**
 * 任务
 * @author lsfoo
 */
entity Task {
  /** taskTitle */
  title String required
  description String
  startDate ZonedDateTime required
  endDate ZonedDateTime required
  /** 可接取数量 */
  quantity Integer required
  status TaskStatus
}
enum TaskStatus {
  WATTING, PROCESSING, DONE, CLOSED
}
/**
 * 任务工作 
 * @author lsfoo
 */
entity Job {
  /** jobTitle */
  title String
}
/**
 * 任务分类
 * @author lsfoo
 */
entity Category{
  /** 描述 */
  description String
  /** 排序 */
  sortOrder Integer
  status CategoryStatus
}
/**
 * 任务标签
 * @author lsfoo
 */
entity Tag{
  name String required
}
/**
 * 用户信息 
 * @author lsfoo
 */
entity Person{
  nickName String 
  balance BigDecimal
  phone String
  email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)

}
 /**
  * The Entity entity.
  * @author A true hipster
  */
 entity BalanceLog {
   /** fieldName */
   fieldName String
   type BalanceType

 }
 enum BalanceType{
   IN,OUT
 }

relationship OneToOne {
    Person{user(login) required} to User
}
enum CategoryStatus {
  AVAILABLE, DISABLED
}
/**
 * Many to one relationship.
 */
relationship ManyToOne {
  Job{task(title)} to Task{job}
  Job{Person(nickName)} to Person{job}
  Task{category(description)} to Category{task}
  Task{Person(nickName)} to Person{task}
}
relationship ManyToMany{
  Tag{task(title)} to Task{tag(name)}
}
/**
 * One to one relationship.
 */
search * with elasticsearch
//dto * with mapstruct
//service * with serviceClass
//service * with serviceImpl
//paginate * with pager
paginate * with infinite-scroll
search * with elasticsearch 
